/*
 * John Shields
 * Horton - API version: 1.0.0
 *
 * Account API
 * Handles Register, Login & Generates Session Cookies.
 *
 * References
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 * https://dev.to/jacobsngoodwin/creating-signup-handler-in-gin-binding-data-3kb5
 * https://www.sohamkamani.com/blog/2018/02/25/golang-password-authentication-and-storage/
 * https://www.programmersought.com/article/28644788179/
 */

package openapi

import (
	"errors"
	"fmt"
	"github.com/GIT_USER_ID/GIT_REPO_ID/go/config"
	"github.com/GIT_USER_ID/GIT_REPO_ID/go/models"
	"github.com/gin-gonic/gin"
	"golang.org/x/crypto/bcrypt"
	"log"
	"strings"
)

var wa models.WorkerAccount

// Function that logs in a user by comparing the entered password with the hashed password in the database,
// removes the existing session for the user, creates a new one and sets a cookie for the user.
func Login(c *gin.Context) {
	db := config.DbConn()

	// Object to bind data too
	var workerForm models.WorkerAccount

	if err := c.BindJSON(&workerForm); err != nil {
		fmt.Println(err.Error())
	}

	username := workerForm.Username
	password := workerForm.Password

	// Check if user exist in the database and check password is not null
	if err := verifyDetails(username, password); err != nil {
		c.JSON(400, models.Error{Code: 400, Messages: "Username does not exist"})
		return // Return as there is issues with the username or password
	}

	// Compare the hash in the db with the user password provided in the request
	if err := bcrypt.CompareHashAndPassword([]byte(wa.Password), []byte(password)); err == nil {

		// Check for existing session, remove if one exits.
		if removeSession(wa.Id) {
			// Create new session_id for user who logged in.
			err, session := createSessionId(username)

			if err != nil {
				log.Print(err)
				c.JSON(500, models.Error{Code: 500, Messages: "Could not create new session_id"})
			} else {
				// set a cookie for logged in user.
				c.SetCookie("session_id", session.Token, session.Expiry, "/",
					"", false, false)
				// user has been logged in and cookie has been set.
				c.JSON(204, nil)
				fmt.Println("\n[INFO]", username, "logged in")
			}
		} else {
			log.Println("\nCould not remove old session")
			c.JSON(500, models.Error{Code: 500, Messages: "Could not remove old session"})
		}
	} else {
		log.Println(err, "\n[ALERT] Password is incorrect for", username)
		c.JSON(401, models.Error{Code: 401, Messages: "Password is incorrect"})
	}
	defer db.Close()
}

// Function to register a new user and creates a session id for the user.
func Register(c *gin.Context) {
	var user models.InlineObject

	// Blind data to object, else throw error
	if err := c.BindJSON(&user); err != nil {
		log.Println(err.Error())
	}

	username := user.Username
	password := user.Password

	// register new user and hash the password
	if err := registerNewUser(c, username, user.Name, password); err == nil {

		// create a session for the user
		err, session := createSessionId(username)

		if err != nil {
			log.Print(err)
			c.JSON(500, nil)
		} else {
			c.JSON(200, session)
		}
	} else {
		log.Println("\n[ALERT] Not completing request")
	}
}

// Function that registers a new user and hashes the password.
// User get registered and are inserted into the database
func registerNewUser(c *gin.Context, username, name, password string) error {
	db := config.DbConn()

	fmt.Println("\n[INFO] Processing User Details...",
		"\nEntered username:", username, "\nEntered Password:", password)

	if strings.TrimSpace(password) == "" {
		log.Println("\n[ALERT] Password is null")
		return errors.New("password is null")
	} else if isValidAccount(username) {
		log.Println("\n[ALERT] Username taken")
		c.JSON(400, models.Error{Code: 400, Messages: "Username is already taken"})
		return errors.New("username is already taken")
	}

	// Hash the password here
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)

	if err != nil {
		c.JSON(500, nil)
		log.Fatal("\n[WARN] Hash Password failed: ", err)
	}

	// insert new user in the workers table.
	insert, err := db.Prepare("INSERT INTO workers(username, worker_name, hash) VALUES (?, ?, ?)")

	if err != nil {
		c.JSON(500, nil)
		log.Println("\n[ALERT] MySQL Error: Error Creating new user account:\n", err)
	}

	result, err := insert.Exec(username, name, hashedPassword)

	// return MySQL error if there is a duplicate entry.
	if err != nil {
		c.JSON(400, models.Error{Code: 400, Messages: "Please make your name more unique"})
		log.Println("\n[ALERT] MySQL Error: Duplicate entry:\n", err)
		return err
	}

	fmt.Println("\n[INFO] Print MySQL Results for user account:\n", result)

	defer db.Close()
	return nil
}

// Function to do a database look up and check if a username matches one provided.
func isValidAccount(username string) bool {
	db := config.DbConn()

	// check username from workers table.
	selDB, err := db.Query("SELECT * FROM workers WHERE username=?", username)

	if err != nil {
		log.Fatal(err)
		return false
	}

	// Check to see if a true user exists in the table, if not return false.
	if selDB.Next() {
		err = selDB.Scan(&wa.Id, &wa.Username, &wa.WorkerName, &wa.Password)

		if err != nil {
			// No matching username in table
			log.Println("\n[ALERT] MySQL Error - no matching username:\n", err)
			return false
		}
		defer db.Close()
		return true
	} else {
		defer db.Close()
		return false
	}
}

// Function to check password for null and if user exists when users login.
func verifyDetails(username, password string) error {

	fmt.Println("\n[INFO] Processing User Details...",
		"\nEntered username:", username, "\nEntered Password:", password)

	if strings.TrimSpace(password) == "" {
		log.Printf("\n[ALERT] Password is null")
		return errors.New("password is null")
	} else if !isValidAccount(username) {
		log.Printf("\n[ALERT] Unknown username")
		return errors.New("username does not exist")
	} else {
		return nil
	}
}
