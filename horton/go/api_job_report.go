/*
 * Horton
 * John Shields
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 *
 * References
 * https://www.golangprograms.com/example-of-golang-crud-using-mysql-from-scratch.html
 * https://levelup.gitconnected.com/build-a-rest-api-using-go-mysql-gorm-and-mux-a02e9a2865ee
 * https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin
 */

package openapi

import (
	"fmt"
	"github.com/GIT_USER_ID/GIT_REPO_ID/go/config"
	"github.com/GIT_USER_ID/GIT_REPO_ID/go/models"
	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
	"log"
	"net/http"
)

// CreateReport - Create a Report
// http://localhost:8080/api/v1/jobReports
func CreateReport(c *gin.Context) {
	var report models.JobReport

	// Blind data to object, else throw error
	if err := c.BindJSON(&report); err != nil {
		fmt.Println(err.Error())
	}

	// Insert Job Report details
	if err := InsertJobReport(report, wa.Username); err == nil {
	} else {
		log.Printf("\n[ALERT] Not completing request.")
	}
}

// InsertJobReport - Insert a new Report into the Database
func InsertJobReport(report models.JobReport, username string) error {

	db := config.DbConn()
	fmt.Println("\n[INFO] Processing Report Details...",
		"\nReport Number:", report.JobReportId, "\nReport Date:", report.Date)

	// insert into the table jobreports
	insertReport, err := db.Prepare(
		"INSERT INTO jobreports(worker_id, date_stamp, vehicle_model, vehicle_reg, vehicle_location, " +
		"miles_on_vehicle, warranty, breakdown, cause, correction, parts, work_hours, job_report_complete) " +
		"VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)")

	// insert into the table customers
	insertCustomer, err := db.Prepare("INSERT INTO customers (job_report_id, customer_name, customer_complaint)" +
		" VALUES (LAST_INSERT_ID(), ?, ?)")

	if err != nil {
		log.Println("\n[ALERT] MySQL Error: Error Creating new Report:\n", err)
	}

	// Check logged in worker
	if !isValidAccount(username) {
		log.Println("\n[ALERT] User has not logged in!")
	}

	db.Query("BEGIN")
	// execute insert into the table jobreports
	reportResult, err := insertReport.Exec(wa.Id, report.Date, report.VehicleModel, report.VehicleReg, report.VehicleLocation,
		report.MilesOnVehicle, report.Warranty, report.Breakdown, report.Cause, report.Correction, report.Parts,
		report.WorkHours, report.JobComplete)
	// execute insert into the table customers
	customerResult, err := insertCustomer.Exec(report.CustomerName, report.Complaint)
	db.Query("COMMIT")

	log.Println(report.JobReportId)

	if err != nil {
		log.Println("\n[ALERT] MySQL Error: Error Inserting Report Details.\n", err)
	}
	fmt.Println("\n[INFO] Print MySQL Results for Report:\n", reportResult, customerResult)

	defer db.Close()
	// Everything is good
	return nil
}

// GetReportById - Get a Report
// TODO - Do more then just ID, have it check by date, and customer name
func GetReportById(c *gin.Context) {

	db := config.DbConn()
	// Get id from request
	reportId := c.Params.ByName("jobReportId")
	// Testing Log message
	log.Printf(reportId)

	// select join query
	selDB, err := db.Query("SELECT DISTINCT jr.job_report_id, jr.date_stamp, jr.vehicle_model,"+
		"jr.vehicle_reg, jr.miles_on_vehicle, jr.vehicle_location, jr.warranty, jr.breakdown, "+
		"cust.customer_name, cust.customer_complaint, jr.cause, jr.correction, jr.parts, jr.work_hours,"+
		"wkr.worker_name, jr.job_report_complete FROM jobreports jr INNER JOIN customers cust"+
		"ON jr.job_report_id = cust.job_report_id"+
		"INNER JOIN workers wkr ON jr.worker_id = wkr.worker_id WHERE jr.job_report_id = ?", reportId)

	fmt.Println("\n[INFO] Processing Reports...")

	if err != nil {
		// return user friendly message to client
		fmt.Printf("500 Internal Server Error.")
		c.JSON(500, nil)
	}

	var report models.JobReport

	// Check each record for a match on jobReportId
	if selDB.Next() {
		err = selDB.Scan(&report.JobReportId, &report.Date, &report.VehicleModel,
			&report.VehicleReg, &report.VehicleLocation, &report.MilesOnVehicle, &report.Warranty, &report.Breakdown)

		if err != nil {
			// return user friendly message to client
			fmt.Printf("500 Internal Server Error.")
			c.JSON(500, nil)
		}
		//Print report that was found
		fmt.Printf("%v\n", report)
		c.JSON(http.StatusOK, report)
	} else {
		fmt.Printf("\n[INFO] No job matching the Id provided was found.")
		c.JSON(404, nil) // No report found, report 404 error and no null object
	}
	defer db.Close()
}

// GetReports - Get a report by the logged in worker's username
// http://localhost:8080/api/v1/jobReports
func GetReports(c *gin.Context) {

	db := config.DbConn()

	worker := wa.Username

	// Check logged in worker
	if !isValidAccount(worker) {
		log.Println("\n[ALERT] User has not logged in!")
		c.JSON(400, models.Error{Code: 400, Messages: "[ALERT] User has not logged in!"})
	}

	// Create query
	selDB, err := db.Query("SELECT DISTINCT jr.job_report_id, jr.date_stamp, jr.vehicle_model, " +
		"jr.vehicle_reg, jr.miles_on_vehicle, jr.vehicle_location, jr.warranty, jr.breakdown, " +
		"cust.customer_name, cust.customer_complaint, jr.cause, jr.correction, jr.parts, jr.work_hours, " +
		"wkr.worker_name, jr.job_report_complete FROM jobreports jr INNER JOIN customers cust " +
		"ON jr.job_report_id = cust.job_report_id " +
		"INNER JOIN workers wkr ON jr.worker_id = wkr.worker_id WHERE wkr.username = ?", worker)

	fmt.Println("\n[INFO] Processing Reports...")

	if err != nil {
		// return user friendly message to client
		log.Println("\n[ALERT] Failed to process reports!")
		fmt.Printf("500 Internal Server Error.")
		c.JSON(500, nil)
	}

	var res []models.JobReport
	fmt.Println("\n[INFO] Loading model...")

	// Run through each record and read values
	for selDB.Next() {
		var report models.JobReport

		err = selDB.Scan(&report.JobReportId, &report.Date, &report.VehicleModel, &report.VehicleReg, &report.MilesOnVehicle,
			&report.VehicleLocation, &report.Warranty, &report.Breakdown, &report.CustomerName, &report.Complaint, &report.Cause,
			&report.Correction, &report.Parts, &report.WorkHours, &report.WorkerName, &report.JobComplete)

		if err != nil {
			// return user friendly message to client
			log.Println("\n[ALERT] Failed to load model!")
			fmt.Printf("\n500 Internal Server Error.")
			c.JSON(500, nil)
		}
		// Add each record to array
		res = append(res, report)
		log.Printf(string(report.JobReportId))
	}
	// Return values, Status OK
	c.JSON(http.StatusOK, res)

	fmt.Println("\n[INFO] Reports Processed.", res)
	defer db.Close()
}

// UpdateReport - Update a job report
// http://localhost:8080/api/v1/jobReports/jobReportId
func UpdateReport(c *gin.Context) {
	db := config.DbConn()
	var report models.JobReport


	// Get id from request
	reportId := c.Params.ByName("jobReportId")
	// Testing Log message
	log.Println(reportId)

	// Blind data to object, else throw error
	if err := c.BindJSON(&report); err != nil {
		fmt.Println(err.Error())
	}

	// Read in values from client request and build object
	update, err := db.Exec("UPDATE jobreports jr SET jr.date_stamp = ?, jr.vehicle_model = ?, " +
		"jr.vehicle_reg = ?, jr.vehicle_location = ?, jr.miles_on_vehicle = ?, jr.warranty = ?, " +
		"jr.breakdown = ?, jr.cause = ?, jr.correction = ?, jr.parts = ?, jr.work_hours = ?, " +
		"jr.job_report_complete = ? WHERE jr.job_report_id = ?", report.Date, report.VehicleModel, report.VehicleReg, report.VehicleLocation,
		report.MilesOnVehicle, report.Warranty, report.Breakdown, report.Cause, report.Correction, report.Parts,
		report.WorkHours, report.JobComplete, reportId)

	if err != nil {
		log.Println("\n[ALERT] MySQL Error: Error Updating Report:\n", err)
		c.JSON(503, "[ALERT] Report not updated.")
	} else {
		fmt.Println("\n[INFO] Processing Job Report Details...",
			"\nReport Number:", report.JobReportId, "\nReport Date:", report.Date)

		// Return 201 response for "Updated"
		c.JSON(201, "[INFO] Report Updated!")
		fmt.Println("\n[INFO] Print MySQL Results for Report:\n", update)
	}

	defer db.Close()
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteReport - Delete a Job Report == Working
func DeleteReport(c *gin.Context) {
	db := config.DbConn()
	// Get id from request
	jobReportId := c.Params.ByName("jobReportId")
	//Create query
	res, err := db.Exec("DELETE FROM jobreports WHERE job_report_id=?", jobReportId)

	if err != nil {
		// return user friendly message to client
		fmt.Printf("500 Internal Server Error.")
		c.JSON(500, nil)
	}

	affectedRows, err := res.RowsAffected()

	if err != nil {
		// return user friendly message to client
		fmt.Printf("500 Internal Server Error.")
		c.JSON(500, nil)
	}

	fmt.Printf("The statement affected %d rows\n", affectedRows)

	c.JSON(http.StatusOK, gin.H{})
}
