/*
 * Horton
 * John Shields

 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"fmt"
	"github.com/GIT_USER_ID/GIT_REPO_ID/go/config"
	"github.com/gin-gonic/gin"
	_ "github.com/go-sql-driver/mysql"
	"log"
	"net/http"
)

// CreateReport - Create a report
func CreateReport(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteReport - Delete a Job Report == Working
func DeleteReport(c *gin.Context) {
	db := config.DbConn()
	// Get id from request
	jobReportId := c.Params.ByName("jobReportId")
	//Create query
	res, err := db.Exec("DELETE FROM jobReports WHERE job_report_id=?", jobReportId)

	if err != nil {
		// return user friendly message to client
		fmt.Printf("500 Internal Server Error.")
		c.JSON(500, nil)
	}

	affectedRows, err := res.RowsAffected()

	if err != nil {
		// return user friendly message to client
		fmt.Printf("500 Internal Server Error.")
		c.JSON(500, nil)
	}

	fmt.Printf("The statement affected %d rows\n", affectedRows)

	c.JSON(http.StatusOK, gin.H{})
}

// GetReportById - Get a job report
// TODO - Do more then just ID, have it check by date, and customer name
func GetReportById(c *gin.Context) {
	db := config.DbConn()
	// Get id from request
	jobReportId := c.Params.ByName("jobReportId")
	// Testing Log message
	log.Printf(string(jobReportId))
	//Create query
	selDB, err := db.Query("SELECT * FROM jobReports WHERE job_report_id=?", jobReportId)

	if err != nil {
		// return user friendly message to client
		fmt.Printf("500 Internal Server Error.")
		c.JSON(500, nil)
	}

	var report JobReport

	// Check each record for a match on jobReportId
	if selDB.Next() {
		err = selDB.Scan(&report.JobReportId, &report.Date, &report.VehicleModel,
			&report.VehicleReg, &report.VehicleLocation, &report.MilesOnVehicle, &report.Warranty, &report.Breakdown)

		if err != nil {
			// return user friendly message to client
			fmt.Printf("500 Internal Server Error.")
			c.JSON(500, nil)
		}
		//Print report that was found
		fmt.Printf("%v\n", report)
		c.JSON(http.StatusOK, report)
	} else {
		fmt.Printf("No job matching the Id provided was found.")
		c.JSON(404, nil) // No report found, report 404 error and no null object
	}
	defer db.Close()
}

// TODO - Fix return object, should be the customer one as it has more fields then job report
// Make sure query is working right with auth
func GetReports(c *gin.Context) {
	db := config.DbConn()

	// Create query
	selDB, err := db.Query("SELECT jr.job_report_id, jr.time_date_stamp, jr.vehicle_model, jr.vehicle_reg, " +
		"jr.miles_on_vehicle, jr.vehicle_location, jr.warranty, jr.breakdown, cust.customer_name, " +
		"cust.customer_complaint, wd.cause, wd.correction, wd.parts, wd.work_hours, wkr.worker_name " +
		"FROM jobReports jr INNER JOIN workdone wd ON jr.work_done_id = wd.work_id INNER JOIN customers cust " +
		"ON jr.job_report_id = cust.job_report_id INNER JOIN workers wkr on jr.worker_id = wkr.worker_id")

	if err != nil {
		// return user friendly message to client
		fmt.Printf("500 Internal Server Error.")
		c.JSON(500, nil)
	}

	var res []JobReport

	// Run through each record and read values:
	for selDB.Next() {
		var report JobReport

		err = selDB.Scan(&report.JobReportId, &report.Date, &report.VehicleModel, &report.VehicleReg, &report.MilesOnVehicle,
			&report.VehicleLocation, &report.Warranty, &report.Breakdown, &report.CustomerName, &report.Complaint, &report.Cause,
			&report.Correction, &report.Parts, &report.WorkHours, &report.WorkerName)

		if err != nil {
			// return user friendly message to client
			fmt.Printf("500 Internal Server Error.")
			c.JSON(500, nil)
		}
		// Add each record to array
		res = append(res, report)
		// Return values, Status OK
		c.JSON(http.StatusOK, res)
		log.Printf(string(report.JobReportId))

	}

	defer db.Close()
}

// UpdateReport - Update a job report
func UpdateReport(c *gin.Context) {
	// Read in values from client request and build object.
	// Added object to db table
	// Return 201 response for "Created"
	// Handle error responses in each error if statement
	c.JSON(http.StatusOK, gin.H{})
}
