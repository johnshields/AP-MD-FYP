/*
 * Horton
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// Cors - To handle cross origin issues while testing
func CORS() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Writer.Header().Set("Access-Control-Allow-Origin", "*")
		c.Writer.Header().Set("Access-Control-Allow-Credentials", "true")
		c.Writer.Header().Set("Access-Control-Allow-Headers", "*")
		c.Writer.Header().Set("Access-Control-Allow-Methods", "GET, HEAD, POST, PUT, DELETE, OPTIONS, PATCH")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	}
}

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	// CORS must be called before any routes are called
	router.Use(CORS())
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		http.MethodGet,
		"/api/v1/",
		Index,
	},

	{
		"Login",
		http.MethodPost,
		"/api/v1/login",
		Login,
	},

	{
		"Register",
		http.MethodPost,
		"/api/v1/register",
		Register,
	},

	{
		"CreateReport",
		http.MethodPost,
		"/api/v1/jobReports",
		CreateReport,
	},

	{
		"DeleteReport",
		http.MethodDelete,
		"/api/v1/jobReports/:jobReportId",
		DeleteReport,
	},

	{
		"GetReportById",
		http.MethodGet,
		"/api/v1/jobReports/:jobReportId",
		GetReportById,
	},

	{
		"GetReports",
		http.MethodGet,
		"/api/v1/jobReports",
		GetReports,
	},
	{
		"UpdateReport",
		http.MethodPut,
		"/api/v1/jobReports/:jobReportId",
		UpdateReport,
	},
}
